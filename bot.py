import sys
import asyncio

from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from api import get_orders_by_user_id, get_user_by_phone
from auth import extract_phone_number, save_user
from db import get_user_by_telegram_id, init_db
from config import BOT_TOKEN, OFFICE_ALIASES
from logs_setup import setup_logging

# =========================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# =========================
logger = setup_logging("logs/bot.log")

# =========================
# –•–ï–õ–ü–ï–†–´
# =========================
def emoji_for_status_line(status: str) -> str:
    s = (status or "").lower()
    if "–≥–æ—Ç–æ–≤–æ" in s:
        return "‚úÖ"
    if "–≤ –ø—É—Ç–∏" in s:
        return "üöö"
    if "–∫ –∑–∞–∫–∞–∑—É" in s:
        return "üïê"
    if "–æ—Ç–∫–∞–∑" in s:
        return "‚ùå"
    return "üì¶"


def format_order_status(order: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º + –∞–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞."""
    number = order.get("number", "-")
    date = order.get("date", "-")
    delivery_office = order.get("deliveryOffice", "") or ""
    office_address = OFFICE_ALIASES.get(delivery_office, delivery_office)
    total_sum = order.get("sum", 0)
    payment_type = order.get("paymentType", "-")
    paid_text = "–û–ø–ª–∞—á–µ–Ω" if order.get("paid") else "–ù–µ –æ–ø–ª–∞—á–µ–Ω"

    lines = [
        f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{number}",
        f"üìÖ –î–∞—Ç–∞: {date}",
        f"üè¢ –û—Ñ–∏—Å: {office_address}",
        f"üí≥ –û–ø–ª–∞—Ç–∞: {payment_type}",
        f"üí∞ –°—É–º–º–∞: {total_sum} ‚ÇΩ",
        f"üìç –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {paid_text}",
        "",
    ]
    for pos in order.get("positions", []):
        brand = (pos.get("brand") or "").strip()
        desc = (pos.get("description") or "").strip()
        status = pos.get("status") or ""
        price = pos.get("priceOut", "")
        qty = pos.get("quantity", "1")

        lines.extend(
            [
                f"{emoji_for_status_line(status)} {brand} {desc}",
                f"   üíµ {price} ‚ÇΩ √ó {qty}",
                f"   üìÑ {status}",
                "",
            ]
        )
    return "\n".join(lines).strip()


# =========================
# –ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ò –û–¢–ü–†–ê–í–ö–ò –ó–ê–ö–ê–ó–û–í
# =========================
async def fetch_orders(user_id: str) -> list[dict]:
    """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–±—ë—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–æ–≤."""
    return await asyncio.to_thread(get_orders_by_user_id, user_id)


async def send_orders_to_chat(
    chat_id: int, user_id: str, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""

    orders = await fetch_orders(user_id)
    if not orders:
        await context.bot.send_message(chat_id=chat_id, text="üïê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return 0

    await context.bot.send_message(
        chat_id=chat_id, text=f"üßæ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}"
    )
    for order in orders:
        await context.bot.send_message(chat_id=chat_id, text=format_order_status(order))

    return len(orders)


# =========================
# –•–≠–ù–î–õ–ï–†–´ –ë–û–¢–ê (–±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫ ‚Äî –≤—Å—ë –ø—Ä–æ—Å—Ç–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ)
# =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    kb = ReplyKeyboardMarkup([[button]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö.\n"
        "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã–∑–≤–∞—Ç—å /orders –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã.",
        reply_markup=kb,
    )


async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∑–∞–∫–∞–∑–æ–≤ (—Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ)."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        if update.message.contact:
            phone = update.message.contact.phone_number
        else:
            phone = extract_phone_number(update.message.text or "")

        if not phone:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        phone = (
            phone.replace("+", "")
            .replace(" ", "")
            .replace("-", "")
            .replace("(", "")
            .replace(")", "")
            .strip()
        )
        if phone.startswith("8"):
            phone = "7" + phone[1:]
        elif not phone.startswith("7"):
            phone = "7" + phone

        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")

        # –ó–∞–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ ABCP
        user = get_user_by_phone(phone)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user.get("userId")
        name = user.get("name", "‚Äî")
        balance = user.get("balance", "0.00")
        debt = user.get("debt", "0.00")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_user(update.effective_user.id, phone, user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({user_id}) —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")

        await update.message.reply_text(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
            f"üë§ {name}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
            f"üí∏ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {debt} ‚ÇΩ\n\n"
            f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤..."
        )

        # –ì—Ä—É–∑–∏–º –∑–∞–∫–∞–∑—ã –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        total_orders = await send_orders_to_chat(update.effective_chat.id, user_id, context)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–≤–æ–¥–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")


async def orders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤."""

    message = update.effective_message
    user_data = get_user_by_telegram_id(update.effective_user.id)
    if not user_data:
        await message.reply_text(
            "‚ö†Ô∏è –Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ /start, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
        )
        return

    user_id = user_data.get("user_id")
    if not user_id:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
        return

    await message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤...")
    total_orders = await send_orders_to_chat(
        update.effective_chat.id, user_id, context
    )
    logger.info(
        "–ö–æ–º–∞–Ω–¥–∞ /orders –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s, –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %s",
        update.effective_user.id,
        total_orders,
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º."""

    await update.effective_message.reply_text(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "‚Ä¢ /orders ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
    )


# =========================
# MAIN
# =========================
if __name__ == "__main__":
    # Windows: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ event-loop
    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()

    # –•—ç–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("orders", orders_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()
