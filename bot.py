import sys
import asyncio
import json
import os
from datetime import datetime
from types import SimpleNamespace
from functools import partial
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    JobQueue,
    Job,
    filters,
)
from api import get_user_by_phone, get_orders_by_user_id
from auth import extract_phone_number, save_user
from db import init_db, get_all_users
from config import BOT_TOKEN, OFFICE_ALIASES
from logs_setup import setup_logging

# =========================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# =========================
logger = setup_logging("logs/bot.log")

# =========================
# –ö–≠–® –î–õ–Ø –í–ê–ß–î–û–ì–ê (—Ñ–∞–π–ª + –ø–∞–º—è—Ç—å)
# =========================
CACHE_FILE = "status_cache.json"
_status_cache: dict[str, str] = {}  # {order_number: formatted_text}


def load_cache() -> dict:
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, dict):
                    return data
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {CACHE_FILE}: {e}")
    return {}


def save_cache():
    try:
        with open(CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(_status_cache, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {CACHE_FILE}: {e}")


# =========================
# –•–ï–õ–ü–ï–†–´
# =========================
def emoji_for_status_line(status: str) -> str:
    s = (status or "").lower()
    if "–≥–æ—Ç–æ–≤–æ" in s:
        return "‚úÖ"
    if "–≤ –ø—É—Ç–∏" in s:
        return "üöö"
    if "–∫ –∑–∞–∫–∞–∑—É" in s:
        return "üïê"
    if "–æ—Ç–∫–∞–∑" in s:
        return "‚ùå"
    return "üì¶"


def format_order_status(order: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º + –∞–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞."""
    number = order.get("number", "-")
    delivery_office = order.get("deliveryOffice", "") or ""
    office_address = OFFICE_ALIASES.get(delivery_office, delivery_office)

    lines = [f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{number}", f"üè¢ –û—Ñ–∏—Å: {office_address}\n"]
    for pos in order.get("positions", []):
        brand = (pos.get("brand") or "").strip()
        desc = (pos.get("description") or "").strip()
        status = pos.get("status") or ""
        price = pos.get("priceOut", "")
        qty = pos.get("quantity", "1")

        lines.append(
            f"{emoji_for_status_line(status)} {brand} {desc}\n"
            f"   üíµ {price} ‚ÇΩ √ó {qty}\n"
            f"   üìÑ {status}"
        )
    return "\n".join(lines)


# =========================
# –•–≠–ù–î–õ–ï–†–´ –ë–û–¢–ê (–±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫ ‚Äî –≤—Å—ë –ø—Ä–æ—Å—Ç–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ)
# =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    kb = ReplyKeyboardMarkup([[button]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö.",
        reply_markup=kb,
    )


async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∑–∞–∫–∞–∑–æ–≤ (—Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ)."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        if update.message.contact:
            phone = update.message.contact.phone_number
        else:
            phone = extract_phone_number(update.message.text or "")

        if not phone:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        phone = (
            phone.replace("+", "")
            .replace(" ", "")
            .replace("-", "")
            .replace("(", "")
            .replace(")", "")
            .strip()
        )
        if phone.startswith("8"):
            phone = "7" + phone[1:]
        elif not phone.startswith("7"):
            phone = "7" + phone

        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")

        # –ó–∞–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ ABCP
        user = get_user_by_phone(phone)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user.get("userId")
        name = user.get("name", "‚Äî")
        balance = user.get("balance", "0.00")
        debt = user.get("debt", "0.00")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_user(update.effective_user.id, phone, user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({user_id}) —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")

        await update.message.reply_text(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
            f"üë§ {name}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
            f"üí∏ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {debt} ‚ÇΩ\n\n"
            f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤..."
        )

        # –ì—Ä—É–∑–∏–º –∑–∞–∫–∞–∑—ã
        orders = get_orders_by_user_id(user_id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")

        if not orders:
            await update.message.reply_text("üïê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑: —à–∞–ø–∫–∞ + –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        for order in orders:
            office = OFFICE_ALIASES.get(order.get("deliveryOffice", ""), "‚Äî")
            header = (
                f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.get('number', '-')}\n"
                f"üìÖ {order.get('date', '-')}\n"
                f"üè¨ {office}\n"
                f"üí∞ –°—É–º–º–∞: {order.get('sum', 0)} ‚ÇΩ\n"
                f"üí≥ –û–ø–ª–∞—Ç–∞: {order.get('paymentType', '-')}\n"
                f"üìç –°—Ç–∞—Ç—É—Å: {'–û–ø–ª–∞—á–µ–Ω' if order.get('paid') else '–ù–µ –æ–ø–ª–∞—á–µ–Ω'}\n\n"
                f"üßæ –ü–æ–∑–∏—Ü–∏–∏:"
            )
            await update.message.reply_text(header)

            for pos in order.get("positions", []):
                brand = pos.get("brand", "")
                desc = pos.get("description", "")
                status = pos.get("status", "")
                price = pos.get("priceOut", "")
                quantity = pos.get("quantity", "1")

                emoji = emoji_for_status_line(status)
                text = (
                    f"{emoji} {brand} {desc}\n"
                    f"   üíµ {price} ‚ÇΩ √ó {quantity}\n"
                    f"   üìÑ {status}\n"
                )
                await update.message.reply_text(text)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–≤–æ–¥–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")


# =========================
# –í–ê–ß–î–û–ì: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫)
# =========================
def build_changes_messages_for_user(user: dict) -> list[tuple[int, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (chat_id, message) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏,
    —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è ¬´—Å–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º¬ª.
    """
    chat_id = user.get("telegram_id") or user.get("chat_id")
    user_id = user.get("user_id") or user.get("abcp_user_id")
    if not chat_id or not user_id:
        logger.warning(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ—Ç chat_id –∏–ª–∏ user_id): {user}")
        return []

    orders = get_orders_by_user_id(user_id)
    messages: list[tuple[int, str]] = []

    for order in orders:
        num = order.get("number")
        text = format_order_status(order)
        prev = _status_cache.get(num)

        if text != prev:
            # –ò–∑–º–µ–Ω–∏–ª–∞—Å—å –ª—é–±–∞—è –ø–æ–∑–∏—Ü–∏—è/—Å—Ç–∞—Ç—É—Å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º
            messages.append((chat_id, f"üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤:\n\n{text}"))
            _status_cache[num] = text

    return messages


async def watchdog_job(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è JobQueue-–æ–π –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫ –≤–Ω—É—Ç—Ä–∏ event-loop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        users = get_all_users()
        if not users:
            logger.info("[WD] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
            return

        total_msgs = 0
        for u in users:
            msgs = await asyncio.to_thread(build_changes_messages_for_user, u)
            for chat_id, text in msgs:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=text)
                    total_msgs += 1
                except Exception as e:
                    logger.exception(f"[WD] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

        if total_msgs:
            save_cache()
            logger.info(f"[WD] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_msgs}")
        else:
            logger.info("[WD] –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.")

    except Exception as e:
        logger.exception(f"[WD] –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")



async def _manual_watchdog_loop(
    app: Application, interval: int, first: int
) -> None:
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤–∞—á–¥–æ–≥–∞, –µ—Å–ª–∏ JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
    try:
        if first:
            await asyncio.sleep(first)

        context = SimpleNamespace(bot=app.bot, application=app)
        while True:
            await watchdog_job(context)  # type: ignore[arg-type]
            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        logger.info("[WD] –†—É—á–Ω–æ–π –≤–∞—á–¥–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        raise


async def _start_manual_watchdog(app: Application, interval: int, first: int) -> None:
    logger.warning(
        "JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é. "
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot[job-queue], —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É."
    )
    app.create_task(_manual_watchdog_loop(app, interval=interval, first=first))

# =========================
# MAIN
# =========================
if __name__ == "__main__":
    # Windows: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ event-loop
    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    # –ë–î + –∫–µ—à
    init_db()
    _status_cache = load_cache()

    # Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()

    # –•—ç–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞—á–¥–æ–≥ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫)
    watchdog_interval = 60
    watchdog_first = 10

    job_queue = getattr(app, "job_queue", None)

    if job_queue is not None:
        job_queue.run_repeating(
            watchdog_job,
            interval=watchdog_interval,
            first=watchdog_first,
            name="orders_watchdog",
        )
    else:
        app.post_init(
            partial(
                _start_manual_watchdog,
                interval=watchdog_interval,
                first=watchdog_first,
            )
        )

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (watchdog: 60 —Å–µ–∫).")
    app.run_polling()
