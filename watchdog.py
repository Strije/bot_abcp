import time
import json
import requests
import asyncio
from telegram import Bot
from config import BOT_TOKEN, API_URL_ORDERS, USERLOGIN, USERPSW, OFFICE_ALIASES
from db import get_all_users
from logs_setup import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logger = setup_logging("logs/watchdog.log")
bot = Bot(token=BOT_TOKEN)
CACHE_FILE = "status_cache.json"

# –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—ã–π event loop
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)


def load_cache():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        with open(CACHE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def save_cache(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞"""
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def get_orders(user_id):
    """–ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    params = {
        "userlogin": USERLOGIN,
        "userpsw": USERPSW,
        "userId": user_id
    }
    try:
        resp = requests.get(API_URL_ORDERS, params=params, timeout=15)
        if resp.status_code == 200:
            return resp.json()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API ({resp.status_code}): {resp.text}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
    return []


def format_order_status(order):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –æ—Ñ–∏—Å–æ–º –≤—ã–¥–∞—á–∏"""
    number = order.get("number", "-")
    delivery_office = order.get("deliveryOffice", "")
    office_address = OFFICE_ALIASES.get(delivery_office, delivery_office)

    lines = [f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{number}", f"üè¢ –û—Ñ–∏—Å: {office_address}\n"]

    for pos in order.get("positions", []):
        brand = pos.get("brand", "")
        desc = pos.get("description", "")
        status = pos.get("status", "")
        price = pos.get("priceOut", "")
        qty = pos.get("quantity", "1")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if "–≥–æ—Ç–æ–≤–æ" in status.lower():
            emoji = "‚úÖ"
        elif "–≤ –ø—É—Ç–∏" in status.lower():
            emoji = "üöö"
        elif "–∫ –∑–∞–∫–∞–∑—É" in status.lower():
            emoji = "üïê"
        elif "–æ—Ç–∫–∞–∑" in status.lower():
            emoji = "‚ùå"
        else:
            emoji = "üì¶"

        lines.append(
            f"{emoji} {brand} {desc}\n"
            f"   üíµ {price} ‚ÇΩ √ó {qty}\n"
            f"   üìÑ {status}"
        )

    return "\n".join(lines)


async def send_message_async(chat_id, text):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await bot.send_message(chat_id, text)
        logger.info(f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def run_watchdog(interval=120):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("üîç Watchdog –∑–∞–ø—É—â–µ–Ω.")
    cache = load_cache()

    while True:
        try:
            users = get_all_users()
            for user in users:
                chat_id = user.get("telegram_id") or user.get("chat_id")
                user_id = user.get("user_id") or user.get("abcp_user_id")

                if not chat_id or not user_id:
                    logger.warning(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ—Ç chat_id –∏–ª–∏ user_id): {user}")
                    continue

                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                orders = get_orders(user_id)

                for order in orders:
                    number = order.get("number")
                    status_text = format_order_status(order)
                    prev_text = cache.get(number)

                    if status_text != prev_text:
                        message = f"üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤:\n\n{status_text}"
                        loop.run_until_complete(send_message_async(chat_id, message))
                        cache[number] = status_text
                        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –∑–∞–∫–∞–∑–µ {number}")

            save_cache(cache)

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ watchdog: {e}")

        time.sleep(interval)


if __name__ == "__main__":
    try:
        run_watchdog()
    finally:
        loop.close()